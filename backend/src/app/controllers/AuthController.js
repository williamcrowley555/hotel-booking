const jwt = require('jsonwebtoken');
const User = require('../models/User');

class AuthController {
    // [POST] /v1/auth/register
    async registerUser(req, res, next) {
        const { email, phone } = req.body;

        // Check if user with provided email or phone already exists
        const existingEmailUser = await User.findOne({ email });
        const existingPhoneUser = await User.findOne({ phone });

        if (existingEmailUser) {
            return res.status(400).send({ message: 'User with provided email already exists' });
        }

        if (existingPhoneUser) {
            return res.status(400).send({ message: 'User with provided phone already exists' });
        }

        const savedUser = await new User(req.body).save();

        return res.status(201).send(savedUser);
    }

    // [POST] /v1/auth/login
    async login(req, res, next) {
        const user = await User.findByCredentials(req.body.email, req.body.password);
        if (!user) {
            return res.status(404).send({ message: 'User not found' });
        }

        if (user.disabled) {
            return res.status(403).send({ message: 'User is disabled' });
        }

        const tokens = await user.generateAuthTokens();

        res.cookie('refreshToken', tokens.refreshToken, {
            httpOnly: true,
            secure: false,
            path: '/',
            sameSite: 'strict',
        });

        return res.status(200).send({ user, accessToken: tokens.accessToken });
    }

    // [POST] /v1/auth/refresh
    async refreshToken(req, res, next) {
        const refreshToken = req.cookies.refreshToken;
        if (!refreshToken) {
            return res.status(401).send({ message: 'You are not authenticated!' });
        }

        jwt.verify(refreshToken, process.env.JWT_REFRESH_KEY, async (err, payload) => {
            if (err) {
                return res.status(403).send({ message: 'Refresh token is not valid!' });
            }

            const user = await User.findById(payload._id);

            if (!user) {
                return res.status(404).send({ message: 'User not found' });
            }

            if (user.disabled) {
                return res.status(403).send({ message: 'User is disabled' });
            }

            // Checking refresh token is generated by server
            const isValidRefreshToken = user.refreshTokens.some((token) => token.refreshToken == refreshToken);
            if (!isValidRefreshToken) {
                return res.status(403).send({ message: 'Refresh token is not valid!' });
            }

            // Remove old refresh token
            user.refreshTokens = user.refreshTokens.filter((token) => token.refreshToken !== refreshToken);

            // Create new access token & refresh token
            const newTokens = await user.generateAuthTokens();

            res.cookie('refreshToken', newTokens.refreshToken, {
                httpOnly: true,
                secure: false,
                path: '/',
                sameSite: 'strict',
            });

            return res.status(200).send({
                accessToken: newTokens.accessToken,
            });
        });
    }

    // [POST] /v1/auth/logout
    async logout(req, res, next) {
        // Remove access token
        const accessToken = req.header('Authorization').replace('Bearer ', '');
        req.user.accessTokens = req.user.accessTokens.filter((token) => token.accessToken !== accessToken);

        // Remove refresh token
        if (req.cookies.refreshToken) {
            req.user.refreshTokens = req.user.refreshTokens.filter(
                (token) => token.refreshToken !== req.cookies.refreshToken,
            );
            res.clearCookie('refreshToken');
        }

        await req.user.save();

        return res.status(200).send({ message: 'Logged out!' });
    }

    // [POST] /v1/auth/logout-all
    async logoutAll(req, res, next) {
        // Remove access tokens & refresh tokens
        req.user.accessTokens = [];
        req.user.refreshTokens = [];

        await req.user.save();

        return res.status(200).send({ message: 'Logged out all!' });
    }
}

module.exports = new AuthController();
